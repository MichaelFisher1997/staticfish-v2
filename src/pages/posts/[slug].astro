---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { Button } from "../../components/ui/button";
import { getPostBySlug, getAllCategories } from "../../lib/sanity";
import { CategorySidebar } from "../../components/CategorySidebar";
import { PostSearch } from "../../components/PostSearch";
import HeroCarousel from "../../components/HeroCarousel";

// Get the slug from the URL
const { slug } = Astro.params;

// Ensure slug exists
if (!slug || typeof slug !== 'string') {
  return Astro.redirect("/posts");
}

// Fetch the post data and categories
const [post, categories] = await Promise.all([
  getPostBySlug(slug).catch((error) => {
    console.error(`Error fetching post with slug "${slug}":`, error);
    return null;
  }),
  getAllCategories().catch((error) => {
    console.error('Error fetching categories:', error);
    return [];
  })
]);

// If post not found, redirect to posts listing page
if (!post) {
  return Astro.redirect("/posts");
}

// Format date
const formattedDate = new Date(post.publishedAt).toLocaleDateString("en-US", {
  year: "numeric",
  month: "long",
  day: "numeric",
});

const heroImages = [
  "/hero-1.png",
  "/hero-2.png", 
  "/hero-3.png",
  "/hero-4.png",
  "/hero-5.png",
];
---

<Layout title={`${post.title} - Staticfish`}>
  <div class="min-h-screen flex flex-col">
    <Header />
    <main class="flex-1">
      <div class="bg-background pb-16">
        <!-- Hero Section with Image Slider -->
        <section class="relative h-[500px] sm:h-[600px] lg:h-[700px] flex items-center justify-center text-center overflow-hidden mb-16">
          <div class="absolute inset-0 w-full h-full">
            <HeroCarousel images={heroImages} client:load />
            <div class="absolute inset-0 bg-black opacity-60 z-20"></div>
          </div>
          <div class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 relative z-30">
            <div class="mx-auto max-w-4xl">
              <!-- Badge -->
              <div class="inline-flex items-center rounded-full bg-blue-50/10 backdrop-blur-sm px-4 py-2 text-sm font-medium text-blue-200 ring-1 ring-inset ring-blue-300/20 mb-6">
                <span>Blog Post</span>
              </div>
              
              <!-- Post Title -->
              <h1 class="text-4xl font-bold tracking-tight text-white sm:text-6xl lg:text-7xl mb-6">
                {post.title}
              </h1>
              
              <!-- Post Meta -->
              <div class="flex items-center justify-center gap-4 text-gray-300 mb-10">
                <time datetime={post.publishedAt}>
                  {formattedDate}
                </time>
                {post.author && (
                  <Fragment>
                    <span>•</span>
                    <span>By {post.author}</span>
                  </Fragment>
                )}
                {post.categories && post.categories.length > 0 && (
                  <Fragment>
                    <span>•</span>
                    <div class="flex gap-x-2">
                      {post.categories.map((category: string) => (
                        <span class="bg-white/10 backdrop-blur-sm text-white rounded-full px-3 py-1 font-medium text-sm">
                          {category}
                        </span>
                      ))}
                    </div>
                  </Fragment>
                )}
              </div>
            </div>
          </div>
        </section>

        <div class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <!-- Search Bar -->
          <div class="mb-12">
            <div class="max-w-lg mx-auto">
              <PostSearch 
                onSearch={() => window.location.href = '/posts'} 
                onClear={() => {}}
                placeholder="Search articles, topics, or keywords..."
                client:load
              />
            </div>
          </div>

          <div class="flex gap-8">
            <!-- Sidebar -->
            <aside class="hidden lg:block w-64 flex-shrink-0">
              <CategorySidebar
                categories={categories}
                selectedCategory={null}
                onCategorySelect={() => window.location.href = '/posts'}
                client:load
              />
            </aside>

            <!-- Main Content -->
            <article class="flex-1 max-w-4xl">
              <!-- Featured Image -->
              {
                post.mainImage && (
                  <div class="relative h-64 sm:h-96 w-full overflow-hidden mb-10 rounded-lg">
                    <img
                      src={`${post.mainImage.asset._ref.replace("image-", "https://cdn.sanity.io/images/2gr3dh6t/production/").replace("-jpg", ".jpg").replace("-png", ".png").replace("-webp", ".webp")}`}
                      alt={post.title}
                      class="h-full w-full object-cover"
                    />
                  </div>
                )
              }

              <!-- Post Content -->
              <div class="prose prose-lg prose-slate max-w-none">
                {
                  /* Render Portable Text content - this is simplified 
                    For complete rendering, you may want to use @portabletext/react */
                }
                {
                  post.body &&
                    post.body.map((block: any) => {
                      if (block._type === "block" && block.style === "normal") {
                        return (
                          <p class="mb-4 text-muted-foreground leading-relaxed">
                            {block.children[0]?.text || ""}
                          </p>
                        );
                      }
                      if (block._type === "block" && block.style === "h2") {
                        return (
                          <h2 class="text-2xl font-bold mt-8 mb-4 text-foreground">
                            {block.children[0]?.text || ""}
                          </h2>
                        );
                      }
                      if (block._type === "block" && block.style === "h3") {
                        return (
                          <h3 class="text-xl font-bold mt-6 mb-3 text-foreground">
                            {block.children[0]?.text || ""}
                          </h3>
                        );
                      }
                      return null;
                    })
                }
              </div>

              <!-- Navigation -->
              <div class="mt-12 border-t border-border pt-6 flex justify-between items-center">
                <Button variant="outline">
                  <a href="/posts" class="flex items-center"> ← Back to all posts </a>
                </Button>
                
                <!-- Mobile Category Filter -->
                <div class="lg:hidden">
                  <Button variant="outline" size="sm">
                    <a href="/posts" class="flex items-center"> Browse Categories </a>
                  </Button>
                </div>
              </div>
            </article>
          </div>
        </div>
      </div>
    </main>
    <Footer />
  </div>
</Layout>
